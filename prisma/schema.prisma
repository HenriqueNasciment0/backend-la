generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  admin Boolean @default(false)
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAt DateTime?

  // Um usuário pode ter vários jobs (relação one-to-many)
  jobs Job[]

  // Relação com RefreshToken (one-to-many)
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id String @id @default(uuid())
  userId Int
  revoked Boolean @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relação com User (many-to-one)
  user User @relation(fields: [userId], references: [id])

  @@index([userId]) // Índice para melhorar a busca por userId
}

model Job {
  id Int @id @default(autoincrement())
  name String
  customerId Int?
  payment String?
  cover String?
  customerLink String?
  discount Int?
  closingDate DateTime?
  eventDate DateTime?
  gift Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  // Relação com User (many-to-one)
  customer User? @relation(fields: [customerId], references: [id])

  // Relações many-to-many
  categories JobCategory[]
  locations JobLocation[]
  payments JobPayment[]

  // Relação one-to-many
  photos JobPhoto[]
}

model Category {
  id Int @id @default(autoincrement())
  name String
  price Int
  description String
  workingMinutes Int
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  // Relação many-to-many com Job
  jobs JobCategory[]
}

model Payment {
  id Int @id @default(autoincrement())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  jobs JobPayment[]
}

model Location {
  id Int @id @default(autoincrement())
  name String
  address String
  coordinates String?
  displacementRate Int
  freeSite Boolean
  outOfState Boolean
  outOfCountry Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  // Relação many-to-many com Job
  jobs JobLocation[]
}

// Tabelas de junção para relações many-to-many
model JobCategory {
  jobId Int
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String?

  job Job @relation(fields: [jobId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([jobId, categoryId])
}

model JobLocation {
  jobId Int
  locationId Int
  assignedAt DateTime @default(now())
  assignedBy String?

  job Job @relation(fields: [jobId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@id([jobId, locationId])
}

model JobPayment {
  jobId Int
  paymentId Int
  times Int?
  observation String?
  firstDate DateTime?
  lastDate DateTime?
  dayOfPayment DateTime?
  installmentDate Int?
  giftGiver String?
  createdAt DateTime @default(now())
  updatedAt DateTime?

    job Job @relation(fields: [jobId], references: [id])
   payment Payment @relation(fields: [paymentId], references: [id])

  @@id([jobId, paymentId])
  @@index([jobId])
  @@index([paymentId])
}

model JobPhoto {
  id Int @id @default(autoincrement())
  jobId Int
  photoUrl String
  uploadedAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id])

  @@index([jobId]) // Índice para otimizar consultas por Job
}

